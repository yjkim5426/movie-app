{"version":3,"sources":["Movie.js","App.js","serviceWorker.js","index.js"],"names":["MoviePoster","_ref2","poster","alt","react_default","a","createElement","src","title","className","MovieGenre","_ref3","genre","poropType","PropTypes","string","isRequired","Movie","_ref","genres","synopsis","map","lib_default","text","maxLine","ellipsis","trimRight","basedOn","App","state","_renderMovies","_this","movies","movie","src_Movie","title_english","medium_cover_image","key","id","_getMovies","_callee","regenerator_default","wrap","_context","prev","next","_callApi","sent","setState","stop","this","fetch","proxyUrl","then","potato","json","data","catch","err","console","log","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"2VA0DA,SAASA,EAATC,GAAsC,IAAfC,EAAeD,EAAfC,OAAQC,EAAOF,EAAPE,IAC7B,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,IAAKL,EAAQC,IAAKA,EAAKK,MAAOL,EAAKM,UAAU,kBAG3D,SAASC,EAATC,GAA+B,IAATC,EAASD,EAATC,MACpB,OAAOR,EAAAC,EAAAC,cAAA,QAAMG,UAAU,eAAeG,GAexCF,EAAWG,UAAY,CACrBD,MAAOE,IAAUC,OAAOC,YAGXC,MA3Df,SAAAC,GAAoD,IAAnCV,EAAmCU,EAAnCV,MAAON,EAA4BgB,EAA5BhB,OAAQiB,EAAoBD,EAApBC,OAAQC,EAAYF,EAAZE,SACtC,OACEhB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,SACbL,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACbL,EAAAC,EAAAC,cAACN,EAAD,CAAaE,OAAQA,EAAQC,IAAKK,KAEpCJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,kBACbL,EAAAC,EAAAC,cAAA,UAAKE,GACLJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,iBACZU,EAAOE,IAAI,SAAAT,GAAK,OACfR,EAAAC,EAAAC,cAACI,EAAD,CAAYE,MAAOA,OAGvBR,EAAAC,EAAAC,cAAA,KAAGG,UAAU,mBACXL,EAAAC,EAAAC,cAACgB,EAAAjB,EAAD,CACEkB,KAAMH,EACNI,QAAQ,IACRC,SAAS,MACTC,WAAS,EACTC,QAAQ,gBCSLC,6MA7CbC,MAAQ,KAMRC,cAAgB,WASd,OAReC,EAAKF,MAAMG,OAAOX,IAAI,SAACY,GACpC,OAAO7B,EAAAC,EAAAC,cAAC4B,EAAD,CACL1B,MAAOyB,EAAME,cACbjC,OAAQ+B,EAAMG,mBACdC,IAAKJ,EAAMK,GACXnB,OAAQc,EAAMd,OACdC,SAAUa,EAAMb,gBAKtBmB,gCAAa,SAAAC,IAAA,IAAAR,EAAA,OAAAS,EAAApC,EAAAqC,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACUd,EAAKe,WADf,OACLd,EADKW,EAAAI,KAEXhB,EAAKiB,SAAS,CACZhB,WAHS,wBAAAW,EAAAM,SAAAT,EAAAU,WAObJ,SAAW,WAIT,OAAOK,MAAMC,qGACZC,KAAK,SAAAC,GAAM,OAAIA,EAAOC,SACtBF,KAAK,SAAAE,GAAI,OAAIA,EAAKC,KAAKxB,SACvByB,MAAM,SAAAC,GAAG,OAAIC,QAAQC,IAAIF,yFA7B1BR,KAAKX,8CAgCE,IACCP,EAAWkB,KAAKrB,MAAhBG,OACR,OACE5B,EAAAC,EAAAC,cAAA,OAAKG,UAAWuB,EAAS,MAAQ,gBAC9BkB,KAAKrB,MAAMG,OAASkB,KAAKpB,gBAAkB,kBAzClC+B,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTNC,IAASC,OAAOhE,EAAAC,EAAAC,cAAC+D,EAAD,MAASC,SAASC,eAAe,SDkH3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrB,KAAK,SAAAsB,GACjCA,EAAaC","file":"static/js/main.3e64df6c.chunk.js","sourcesContent":["// import React, { Component } from 'react';\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport \"./Movie.css\";\r\nimport LinesEllipsis from \"react-lines-ellipsis\";\r\n\r\n// class Movie extends Component{\r\n//     static propTypes = {\r\n//         title: PropTypes.string.isRequired,\r\n//         poster: PropTypes.string.isRequired\r\n//     }\r\n\r\n//     render() {\r\n//         // console.log(this.props)\r\n//         return (\r\n//             <div>\r\n//                 <MoviePoster poster={this.props.poster} />\r\n//                 <h1>{this.props.title}</h1>\r\n//             </div>\r\n//         )\r\n//     }\r\n// }\r\n\r\nfunction Movie({ title, poster, genres, synopsis }) {\r\n  return (\r\n    <div className=\"Movie\">\r\n      <div className=\"Movie__Columns\">\r\n        <MoviePoster poster={poster} alt={title} />\r\n      </div>\r\n      <div className=\"Movie__Columns\">\r\n        <h1>{title}</h1>\r\n        <div className=\"Movie__Genres\">\r\n          {genres.map(genre => (\r\n            <MovieGenre genre={genre} />\r\n          ))}\r\n        </div>\r\n        <p className=\"Movie__Synopsis\">\r\n          <LinesEllipsis\r\n            text={synopsis}\r\n            maxLine=\"3\"\r\n            ellipsis=\"...\"\r\n            trimRight\r\n            basedOn=\"letters\"\r\n          />\r\n        </p>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// class MoviePoster extends Component{\r\n//     render(){\r\n//         return(\r\n//             <img src={this.props.poster}></img>\r\n//         )\r\n//     }\r\n// }\r\n\r\nfunction MoviePoster({ poster, alt }) {\r\n  return <img src={poster} alt={alt} title={alt} className=\"Movie__Poster\" />;\r\n}\r\n\r\nfunction MovieGenre({ genre }) {\r\n  return <span className=\"Movie_genre\">{genre}</span>;\r\n}\r\n\r\nMovie.propTypes = {\r\n  title: PropTypes.string.isRequired,\r\n  poster: PropTypes.string.isRequired,\r\n  genres: PropTypes.string.isRequired,\r\n  synopsis: PropTypes.string.isRequired,\r\n  alt: PropTypes.string.isRequired\r\n};\r\n\r\nMoviePoster.propTypes = {\r\n  poster: PropTypes.string.isRequired\r\n};\r\n\r\nMovieGenre.poropType = {\r\n  genre: PropTypes.string.isRequired\r\n};\r\n\r\nexport default Movie;\r\n","import React, { Component } from 'react';\r\nimport './App.css';\r\nimport Movie from './Movie';\r\n\r\nclass App extends Component {\r\n\r\n  state = {}\r\n\r\n  componentDidMount(){\r\n    this._getMovies();\r\n  }\r\n\r\n  _renderMovies = () => {\r\n    const movies = this.state.movies.map((movie) => {\r\n      return <Movie \r\n        title={movie.title_english} \r\n        poster={movie.medium_cover_image} \r\n        key={movie.id} \r\n        genres={movie.genres} \r\n        synopsis={movie.synopsis}/>\r\n    })\r\n    return movies\r\n  }\r\n\r\n  _getMovies = async () => {\r\n    const movies = await this._callApi()\r\n    this.setState({\r\n      movies\r\n    })\r\n  }\r\n\r\n  _callApi = () => {\r\n    var proxyUrl = 'https://cors-anywhere.herokuapp.com/',\r\n    targetUrl = 'https://yts.ag/api/v2/list_movies.json?sort_by=download_count'\r\n\r\n    return fetch(proxyUrl + targetUrl)\r\n    .then(potato => potato.json())\r\n    .then(json => json.data.movies)\r\n    .catch(err => console.log(err))\r\n  }\r\n\r\n  render() {\r\n    const { movies } = this.state;\r\n    return (\r\n      <div className={movies ? \"App\" : \"App--loading\"}>\r\n        {this.state.movies ? this._renderMovies() : 'Loading'}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// In production, we register a service worker to serve assets from local cache.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\r\n// cached resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\r\n// This link also includes instructions on opting out of this behavior.\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not local host. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the old content will have been purged and\r\n              // the fresh content will have been added to the cache.\r\n              // It's the perfect time to display a \"New content is\r\n              // available; please refresh.\" message in your web app.\r\n              console.log('New content is available; please refresh.');\r\n\r\n              // Execute callback\r\n              if (config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      if (\r\n        response.status === 404 ||\r\n        response.headers.get('content-type').indexOf('javascript') === -1\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\n// ReactDOM render one component to 'document.getElementById('root'));'\r\nReactDOM.render(<App />, document.getElementById('root'));\r\nserviceWorker.unregister();\r\n\r\n// React is an library\r\n// Use the ReactDom for a web: jsx --ReactDom--> html\r\n// Use the ReactNative for a mobile app: jsx --ReactNative--> Mobile app?"],"sourceRoot":""}